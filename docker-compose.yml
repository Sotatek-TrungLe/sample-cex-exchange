version: '3.8'

services:

  frontend:
    image: frontend
    build:
      context: ./frontend
    ports:
      - "8080:8080"
    environment:
      - FLASK_RUN_PORT=8080
      - FLASK_ENV=development

  # user Service (Flask API with PostgreSQL and Redis)
  # user-service:
  #   image: flask
  #   build:
  #     context: ./user-service
  #   ports:
  #     - "5000:5000"
  #   environment:
  #     - POSTGRES_HOST=user-postgres
  #     - POSTGRES_DB=user_db
  #     - POSTGRES_USER=admin
  #     - POSTGRES_PASSWORD=admin
  #     - REDIS_HOST=user-redis
  #   depends_on:
  #     - user-postgres
  #     - user-redis
  #   networks:
  #     - trading-network

  # user-postgres:
  #   image: postgres:13
  #   environment:
  #     - POSTGRES_DB=user_db
  #     - POSTGRES_USER=admin
  #     - POSTGRES_PASSWORD=admin
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - trading-network

  # user-redis:
  #   image: redis:alpine
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - trading-network

  # Balance Service (Flask API with PostgreSQL)
  balance-service:
    image: balance-service-image
    build:
      context: ./balance-service
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    environment:
      - FLASK_RUN_PORT=5001
      - POSTGRES_HOST=balance-postgres
      - POSTGRES_DB=balance_db
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    depends_on:
      - balance-postgres
      - redis-balance
    networks:
      - trading-network

  balance-postgres:
    image: postgres:13
    environment:
      - POSTGRES_DB=balance_db
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    ports:
      - "5433:5432"
    networks:
      - trading-network
    volumes:
      - ./balance-service/sample.sql:/docker-entrypoint-initdb.d/sample.sql 

  # Redis for caching balance and trade states
  redis-balance:
    image: redis:alpine
    ports:
      - "6380:6379"
    networks:
      - trading-network

  # Kafka Service for event processing
  kafka:
    image: bitnami/kafka:latest
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    networks:
      - trading-network

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - trading-network
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  # Order Service (Flask API with PostgreSQL)
  order-service:
    image: order-service-image
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "5002:5002"
    environment:
      - FLASK_RUN_PORT=5002
      - POSTGRES_HOST=order-postgres
      - POSTGRES_DB=order_db
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    depends_on:
      - order-postgres
      - redis-balance
      - kafka
    networks:
      - trading-network

  order-postgres:
    image: postgres:13
    environment:
      - POSTGRES_DB=order_db
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    ports:
      - "5434:5432"
    networks:
      - trading-network

  # Order state manager
  order-state-manager:
    image: order-service-image
    # build:
    #   context: ./order-service
    #   dockerfile: Dockerfile
    command: python order_state_manager.py  # Run order_state_manager as the main process
    environment:
      - KAFKA_BROKER=kafka:9092
      - ORDER_STATE_TOPIC=order_state_updates
    depends_on:
      - kafka
      - order-service
    networks:
      - trading-network

  # Matching Engine Service (Python)
  matching-engine:
    image: me-service-image
    build:
      context: ./matching-engine
    depends_on:
      - kafka
      - redis-balance
      - cassandra
    networks:
      - trading-network
    ports:
        - "8765:8765"  # Expose WebSocket port

  # Flask socket order-book (Python)
  ws-order-book:
    image: ws-order-book
    build:
      context: ./matching-engine
      dockerfile: ws-order-book.Dockerfile
    depends_on:
      - redis-balance
    networks:
      - trading-network
    ports:
        - "5555:5555"  # Expose WebSocket port
    environment:
      - FLASK_RUN_PORT=5555

  # Cassandra for on-chain transaction, order, trade history
  cassandra:
    image: cassandra:latest
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=trading_cluster
      - CASSANDRA_SEEDS=cassandra
    networks:
      - trading-network

networks:
  trading-network:
    driver: bridge
